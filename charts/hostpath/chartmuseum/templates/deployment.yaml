apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      name: {{ .Release.Name }}
      labels:
        app: {{ .Release.Name }}
    spec:
      securityContext:
        runAsUser: 0
      volumes:
        - name: {{ .Release.Name }}-data
          hostPath:
            path: {{ .Values.hostPath.base }}/{{ .Release.Namespace }}/{{ .Release.Name }}
            type: DirectoryOrCreate
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          - name: STORAGE
            value: {{ .Values.env.open.STORAGE }}
          - name: STORAGE_LOCAL_ROOTDIR
            value: /charts
          - name: DEBUG
            value: "1"
        args:
        - --port={{ .Values.container.port }}
        ports:
        - name: http
          containerPort: {{ .Values.container.port }}
        volumeMounts:
          - name: {{ .Release.Name }}-data
            mountPath: /charts
        livenessProbe:
          httpGet:
            path: {{ .Values.env.open.CONTEXT_PATH }}/health
            port: http
{{ toYaml .Values.probes.liveness | indent 10 }}
        readinessProbe:
          httpGet:
            path: {{ .Values.env.open.CONTEXT_PATH }}/health
            port: http
{{ toYaml .Values.probes.readiness | indent 10 }}
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
      restartPolicy: Always
      priorityClassName: {{ .Values.priorityClass }}