apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: "{{ tpl .Values.host.name . }}"
  generation: 1
  labels:
    app: "{{ tpl .Values.host.name . }}"
    kubevirt.io/os: linux
spec:
  running: true
  template:
    metadata:
      labels:
        kubevirt.io/domain: "{{ tpl .Values.host.name . }}"
    spec:
      nodeSelector:
        {{- range $s := $.Values.host.additional.selectors }}
        {{ $s.key }}: {{ $s.value }}
        {{- end }}
      domain:
        cpu:
          dedicatedCpuPlacement: true
          isolateEmulatorThread: true
          # ioThreadsPolicy: auto # "not available for sata"
          cores: {{ .Values.host.resources.cpu }}
        devices:
          blockMultiQueue: true
          disks:
            - name: hostdisk
              bootOrder: 1
              # dedicatedIOThread: true
              disk:
                bus: virtio
            - name: "cloudinit"
              cdrom:
                bus: "sata"
                readonly: true
            {{- range $d := $.Values.host.additional.disks }}
            - name: {{ $d.name }}
              # dedicatedIOThread: true
              disk:
                bus: virtio
            {{- end }}
          interfaces:
            - name: "default"
              bridge: {}
              macAddress: {{ .Values.host.machine.mac }}
        machine:
          type: {{ .Values.host.machine.type }}
        resources:
          requests:
            memory: {{ .Values.host.resources.memory }}
      networks:
        - name: "default"
          pod: {}
      volumes:
        {{- range $d := $.Values.host.additional.disks }}
        - hostDisk:
            path: {{ $d.path }}
            type: DiskOrCreate
          name: {{ $d.name }}
        {{- end }}
        - name: hostdisk
          hostDisk:
            path: "{{ .Values.host.path }}/{{ .Release.Namespace }}/vm/{{ tpl .Values.host.name . }}.img"
            type: DiskOrCreate
          # containerDisk:
          #   image: {{ .Values.host.image }}
        - name: "cloudinit"
          cloudInitNoCloud:
            userData: |
              #cloud-config
              hostname: "{{ tpl .Values.host.name . }}"
              users:
              - name: proto
                sudo: ['ALL=(ALL) NOPASSWD:ALL']
                groups: sudo
                shell: /bin/bash
              chpasswd:
                list: |
                  proto:toor
                  root:toor
                expire: False
        
